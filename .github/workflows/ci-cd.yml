name: Docker CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/hello-james

jobs:
  test-and-build:
    name: Run Gradle tests & build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Build (before Docker)
        run: ./gradlew build -x test --no-daemon

      - name: Upload JAR (optional)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  docker-build-push:
    name: Build & push Docker image
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to remote server via SSH (password)
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Deploy over SSH (password)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          envs: IMAGE_NAME
          script: |
            set -euxo pipefail
            IMAGE="${{ env.IMAGE_NAME }}:latest"
            CONTAINER="hello-james"
            HOST_PORT=80
            CONTAINER_PORT=80
            NETWORK="hello-net"
            ENV_FILE="/opt/hello-james/.env"

            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            docker network inspect "$NETWORK" >/dev/null 2>&1 || docker network create "$NETWORK"
            docker pull "$IMAGE"

            if [ "$(docker ps -aq -f name=^${CONTAINER}$)" ]; then
              docker rm -f "$CONTAINER" || true
            fi

            mkdir -p /opt/hello-james

            docker run -d --name "$CONTAINER"               --restart unless-stopped               --env-file "$ENV_FILE"               -p ${HOST_PORT}:${CONTAINER_PORT}               --network "$NETWORK"               "$IMAGE"

            docker image prune -f
